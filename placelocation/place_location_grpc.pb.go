// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: placelocation/place_location.proto

package placelocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaceLocationClient is the client API for PlaceLocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaceLocationClient interface {
	// A simple RPC.
	//
	// Obtains the place at a given location.
	//
	// A place with an empty name is returned if there's no place at the given
	// location.
	GetPlace(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Place, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Places available within the given coordinates.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the coordinates may cover a large area and contain a
	// huge number of places.
	ListPlaces(ctx context.Context, in *Coordinates, opts ...grpc.CallOption) (PlaceLocation_ListPlacesClient, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Locations on a path being traversed, returning a
	// PathSummary when traversal is completed.
	RecordPath(ctx context.Context, opts ...grpc.CallOption) (PlaceLocation_RecordPathClient, error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of LocationNotes sent while a path is being traversed,
	// while receiving other PathNotes (e.g. from other users).
	PathChat(ctx context.Context, opts ...grpc.CallOption) (PlaceLocation_PathChatClient, error)
}

type placeLocationClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaceLocationClient(cc grpc.ClientConnInterface) PlaceLocationClient {
	return &placeLocationClient{cc}
}

func (c *placeLocationClient) GetPlace(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, "/placelocation.PlaceLocation/GetPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeLocationClient) ListPlaces(ctx context.Context, in *Coordinates, opts ...grpc.CallOption) (PlaceLocation_ListPlacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaceLocation_ServiceDesc.Streams[0], "/placelocation.PlaceLocation/ListPlaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &placeLocationListPlacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaceLocation_ListPlacesClient interface {
	Recv() (*Place, error)
	grpc.ClientStream
}

type placeLocationListPlacesClient struct {
	grpc.ClientStream
}

func (x *placeLocationListPlacesClient) Recv() (*Place, error) {
	m := new(Place)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *placeLocationClient) RecordPath(ctx context.Context, opts ...grpc.CallOption) (PlaceLocation_RecordPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaceLocation_ServiceDesc.Streams[1], "/placelocation.PlaceLocation/RecordPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &placeLocationRecordPathClient{stream}
	return x, nil
}

type PlaceLocation_RecordPathClient interface {
	Send(*Location) error
	CloseAndRecv() (*PathSummary, error)
	grpc.ClientStream
}

type placeLocationRecordPathClient struct {
	grpc.ClientStream
}

func (x *placeLocationRecordPathClient) Send(m *Location) error {
	return x.ClientStream.SendMsg(m)
}

func (x *placeLocationRecordPathClient) CloseAndRecv() (*PathSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PathSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *placeLocationClient) PathChat(ctx context.Context, opts ...grpc.CallOption) (PlaceLocation_PathChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaceLocation_ServiceDesc.Streams[2], "/placelocation.PlaceLocation/PathChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &placeLocationPathChatClient{stream}
	return x, nil
}

type PlaceLocation_PathChatClient interface {
	Send(*LocationNote) error
	Recv() (*LocationNote, error)
	grpc.ClientStream
}

type placeLocationPathChatClient struct {
	grpc.ClientStream
}

func (x *placeLocationPathChatClient) Send(m *LocationNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *placeLocationPathChatClient) Recv() (*LocationNote, error) {
	m := new(LocationNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaceLocationServer is the server API for PlaceLocation service.
// All implementations must embed UnimplementedPlaceLocationServer
// for forward compatibility
type PlaceLocationServer interface {
	// A simple RPC.
	//
	// Obtains the place at a given location.
	//
	// A place with an empty name is returned if there's no place at the given
	// location.
	GetPlace(context.Context, *Location) (*Place, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Places available within the given coordinates.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the coordinates may cover a large area and contain a
	// huge number of places.
	ListPlaces(*Coordinates, PlaceLocation_ListPlacesServer) error
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Locations on a path being traversed, returning a
	// PathSummary when traversal is completed.
	RecordPath(PlaceLocation_RecordPathServer) error
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of LocationNotes sent while a path is being traversed,
	// while receiving other PathNotes (e.g. from other users).
	PathChat(PlaceLocation_PathChatServer) error
	mustEmbedUnimplementedPlaceLocationServer()
}

// UnimplementedPlaceLocationServer must be embedded to have forward compatible implementations.
type UnimplementedPlaceLocationServer struct {
}

func (UnimplementedPlaceLocationServer) GetPlace(context.Context, *Location) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlace not implemented")
}
func (UnimplementedPlaceLocationServer) ListPlaces(*Coordinates, PlaceLocation_ListPlacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPlaces not implemented")
}
func (UnimplementedPlaceLocationServer) RecordPath(PlaceLocation_RecordPathServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordPath not implemented")
}
func (UnimplementedPlaceLocationServer) PathChat(PlaceLocation_PathChatServer) error {
	return status.Errorf(codes.Unimplemented, "method PathChat not implemented")
}
func (UnimplementedPlaceLocationServer) mustEmbedUnimplementedPlaceLocationServer() {}

// UnsafePlaceLocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaceLocationServer will
// result in compilation errors.
type UnsafePlaceLocationServer interface {
	mustEmbedUnimplementedPlaceLocationServer()
}

func RegisterPlaceLocationServer(s grpc.ServiceRegistrar, srv PlaceLocationServer) {
	s.RegisterService(&PlaceLocation_ServiceDesc, srv)
}

func _PlaceLocation_GetPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceLocationServer).GetPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/placelocation.PlaceLocation/GetPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceLocationServer).GetPlace(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceLocation_ListPlaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Coordinates)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaceLocationServer).ListPlaces(m, &placeLocationListPlacesServer{stream})
}

type PlaceLocation_ListPlacesServer interface {
	Send(*Place) error
	grpc.ServerStream
}

type placeLocationListPlacesServer struct {
	grpc.ServerStream
}

func (x *placeLocationListPlacesServer) Send(m *Place) error {
	return x.ServerStream.SendMsg(m)
}

func _PlaceLocation_RecordPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaceLocationServer).RecordPath(&placeLocationRecordPathServer{stream})
}

type PlaceLocation_RecordPathServer interface {
	SendAndClose(*PathSummary) error
	Recv() (*Location, error)
	grpc.ServerStream
}

type placeLocationRecordPathServer struct {
	grpc.ServerStream
}

func (x *placeLocationRecordPathServer) SendAndClose(m *PathSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *placeLocationRecordPathServer) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PlaceLocation_PathChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaceLocationServer).PathChat(&placeLocationPathChatServer{stream})
}

type PlaceLocation_PathChatServer interface {
	Send(*LocationNote) error
	Recv() (*LocationNote, error)
	grpc.ServerStream
}

type placeLocationPathChatServer struct {
	grpc.ServerStream
}

func (x *placeLocationPathChatServer) Send(m *LocationNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *placeLocationPathChatServer) Recv() (*LocationNote, error) {
	m := new(LocationNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaceLocation_ServiceDesc is the grpc.ServiceDesc for PlaceLocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaceLocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "placelocation.PlaceLocation",
	HandlerType: (*PlaceLocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlace",
			Handler:    _PlaceLocation_GetPlace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPlaces",
			Handler:       _PlaceLocation_ListPlaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordPath",
			Handler:       _PlaceLocation_RecordPath_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PathChat",
			Handler:       _PlaceLocation_PathChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "placelocation/place_location.proto",
}
